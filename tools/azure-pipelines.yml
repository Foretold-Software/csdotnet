# Copyright (c) Foretold Software, LLC. All rights reserved. Licensed under the Microsoft Public License (MS-PL). See the license.md file in the project root directory for full license information.

##################################################################################
#   Filename: azure-pipelines.yml
#
#   Description:
#       This file contains elements necessary to build, test,
#       and deploy the CS.Net project.
#
##################################################################################

schedules:
- cron: '0 8 * * *'
  displayName: Nightly build
  branches:
    include:
    - master
  always: 'true'

pool:
  vmImage: 'windows-latest'

variables:
  Project.Name: CS.Net

  # Versioning variables
  Version.MajorMinor.NonReleaseDefault: '1.3'

  ${{ if startsWith(lower(variables['Build.SourceBranch']), 'refs/heads/release/') }}:
    Version.MajorMinor: $[variables['Build.SourceBranchName']]
  ${{ if not(startsWith(lower(variables['Build.SourceBranch']), 'refs/heads/release/')) }}:
    Version.MajorMinor: $[variables['Version.MajorMinor.NonReleaseDefault']]

  Version.Build.InitialValue: '100'
  Version.Build: $[counter(variables['Version.MajorMinor'], variables['Version.Build.InitialValue'])]

  Build.Version: $[format('{0}.{1}', variables['Version.MajorMinor'], variables['Version.Build'])]
  Build.TotalCount: $[counter('Build.TotalCount', variables['Version.Build.InitialValue'])]

  # Solution build variables
  Build.Solution: '**\*.sln'
  Build.Platform: 'Any CPU'
  Build.Configuration: 'Release'
  Build.Output.Directory: 'src\$(Project.Name)\bin\$(Build.Configuration)'
  Build.Output.NuGetPackage: '$(Build.Output.Directory)\*.nupkg'
  Source.License: 'license.md'


name: $(Build.Version)


stages:
- stage: build
  displayName: Build
  jobs:

  - job: build
    displayName: Build
    steps:


    # --------------------------------------------------
    #  Build the solution
    # --------------------------------------------------

    - task: NuGetToolInstaller@1
      displayName: Nuget - Install tool

    - task: NuGetCommand@2
      displayName: Nuget - Restore
      inputs:
        restoreSolution: '$(Build.Solution)'

    - task: VSBuild@1
      displayName: Build solution
      inputs:
        solution: '$(Build.Solution)'
        platform: '$(Build.Platform)'
        configuration: '$(Build.Configuration)'
        msbuildArgs: '/p:Version=$(Build.Version)'


    # --------------------------------------------------
    #  Run unit tests
    # --------------------------------------------------

    - task: VSTest@2
      displayName: Run unit tests
      inputs:
        platform: '$(Build.Platform)'
        configuration: '$(Build.Configuration)'


    # --------------------------------------------------
    #  Stage NuGet package
    # --------------------------------------------------

    # Copy the NuGet package to the artifact staging directory.
    - task: CopyFiles@2
      displayName: NuGet package - Copy to artifact staging directory
      inputs:
        Contents: '$(Build.Output.NuGetPackage)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true

    # Delete the NuGet package from the build output directory so it is not included in the binaries archive.
    - task: DeleteFiles@1
      displayName: NuGet package - Delete
      inputs:
        Contents: '$(Build.Output.NuGetPackage)'


    # --------------------------------------------------
    #  Stage debug symbols
    # --------------------------------------------------

    # Copy the debug symbols files to a temporary folder in the artifact staging directory.
    - task: CopyFiles@2
      displayName: Debug symbols - Copy to artifact staging directory
      inputs:
        SourceFolder: '$(Build.Output.Directory)'
        Contents: '**\*.pdb'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\symbols'

    # Create an archive in the artifact staging directory with the debug symbols.
    - task: ArchiveFiles@2
      displayName: Debug symbols - Archive
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\symbols'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\$(Project.Name).$(Build.Version)-debug.zip'

    # Delete the debug symbols files from the build output directory so they are not included in the binaries archive.
    - task: DeleteFiles@1
      displayName: Debug symbols - Delete
      inputs:
        Contents: '$(Build.Output.Directory)\**\*.pdb'

    # Delete the temporary directory so it is not included in the published artifacts.
    - task: DeleteFiles@1
      displayName: Debug symbols - Delete temporary folder
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)'
        Contents: 'symbols'

    # --------------------------------------------------
    #  Stage binaries
    # --------------------------------------------------

    # Create an archive in the artifact staging directory with the build output binaries.
    - task: ArchiveFiles@2
      displayName: Archive binaries
      inputs:
        rootFolderOrFile: '$(Build.Output.Directory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\$(Project.Name).$(Build.Version)-binaries.zip'

    # Include the license file in the binaries archive.
    - task: ArchiveFiles@2
      displayName: Archive binaries - add license
      inputs:
        rootFolderOrFile: '$(Source.License)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)\$(Project.Name).$(Build.Version)-binaries.zip'
        replaceExistingArchive: false


    # --------------------------------------------------
    #  Publish artifacts
    # --------------------------------------------------

    # Publish all the files in the artifact staging directory as pipeline artifacts.
    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'Build pipeline artifacts'
        publishLocation: 'pipeline'
